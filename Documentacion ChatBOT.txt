addKeyword
Esta función, que se importa desde @bot-whatsapp/bot, inicia un flujo de chat en base a la configuración proporcionada.

La función addKeyword es como un punto de partida para la conversación. Le das a addKeyword una palabra o frase clave, y cuando alguien envía ese término al chatbot, la función desencadena un flujo de diálogo que has predefinido.

En este ejemplo vemos cómo establecer un flujo que el bot seguirá al recibir un hola o alo. Las respuestas del bot se establecen con .addAnswer()

const { addKeyword } = require('@bot-whatsapp/bot')

const flowPrincipal = addKeyword(['hola', 'alo'])
    .addAnswer(['Hola, bienvenido a mi tienda', ]'¿Como puedo ayudarte?', 'Bolsos')
    'Tengo:'[(addAnswer., 'Zapatos', 'etc ...'])
Podemos limitar el flujo a una sola palabra, como en el caso de comprar.

const { addKeyword } = require('@bot-whatsapp/bot')

const flowPrincipal = addKeyword('comprar')
    .addAnswer(['¿Como puedo ayudarte?'])

Regex
Para iniciarse en base a una expresión regular, utilice el código a continuación. En este caso detectará cuando el mensaje contiene algún número de tarjeta válido.

const { addKeyword } = require('@bot-whatsapp/bot')

const REGEX_CREDIT_NUMBER = `/(^4[0-9]{12}(?:[0-9]{3})?$)|(^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$)|(3[47][0-9]{13})|(^3(?:0[0-5]|[68][0-9])[0-9]{11}$)|(^6(?:011|5[0-9]{2})[0-9]{12}$)|(^(?:2131|1800|35\d{3})\d{11}$)/gm`

const flow = addKeyword(REGEX_CREDIT_NUMBER, { regex: true })
    .addAnswer(`Gracias por proporcionar un numero de tarjeta valido`)
    .addAnswer('Fin!')

Sensitive
Por defecto, addKeyword detecta la palabra indicada en cualquier parte del mensaje, pero con { sensitive: true } hará que solo se active el flujo si la persona escribe exactamente la palabra en cuestión. Vea el ejemplo de "hola" a continuación:

const { addKeyword } = require('@bot-whatsapp/bot')

const flowBienvenida = addKeyword('hola', { sensitive: true })
    .addAnswer('Bienvenido a este chatbot')

Eventos
Para los casos donde necesitamos responder ante acciones que no son palabras, podemos usar eventos.

Los eventos disponibles son:

WELCOME: Activa el flujo cuando la persona escribe una palabra que no está en ningún flujo. Útil para mensajes de bienvenida
MEDIA: Se activa cuando la persona envía una imagen o video
LOCATION: Útil para detectar cuando la persona envía coordenadas de ubicación
VOICE_NOTE: Activa el flujo cuando la persona envía una nota de voz
DOCUMENT: Activa el flujo cuando la persona envía algún archivo como pdf, html u otro tipo además de los anteriores
ACTION: Se utiliza como un "placebo" para no colocar una palabra clave. Esto es util cuando quiere un flujo pero que no se activa con ninguna palabra clave. (util para llamar desde gotoFlow)
A continuación, vea algunos ejemplos de uso de estos eventos.

const { EVENTS } = require('@bot-whatsapp/bot')

const flowBienvenida = addKeyword(EVENTS.WELCOME)
    .addAnswer('Bienvenido a este chatbot')

const flowRecibirMedia = addKeyword(EVENTS.MEDIA)
    .addAnswer('He recibido tu foto o video')
    
ACTION.EVENTSconst flowLocation = addKeyword(EVENTS.LOCATION)
    .addAnswer('Ohh ya veo donde estas')

const flowNotaDeVoz = addKeyword(EVENTS.VOICE_NOTE)
    .addAnswer('Dame un momento para escuchar la nota de voz')

const flowDocumento = addKeyword(EVENTS.DOCUMENT)
    .addAnswer('Documento PDF recibido')

const flowAction = addKeyword()
    (addAnswer.'Documento PDF recibido')

addAnswer
Esta funcion se importa desde @bot-whatsapp/bot

Se encarga de responder al usuario, puedes responder un texto o archivo adjunto.

    const { addKeyword } = require('@bot-whatsapp/bot')

    const flowWelcome = addKeyword('hola').addAnswer('Hola y bievendido! como puedo ayudarte')

El mensaje'Hola y bievendido! como puedo ayudarte' se enviara como un mensaje de whatsapp

Enviar más de un mensaje
    const { addKeyword } = require('@bot-whatsapp/bot')

    const flowWelcome = addKeyword('hola')
    .addAnswer('Hola!')
    .addAnswer('Bienvenido')
    .addAnswer('¿Como puedo ayudarte?')

Se enviaran (3) tres mensajes por separados consecutivamente. Hola , Bienvenido, ¿Como puedo ayudarte?

Enviar mensaje con salto de linea
    const { addKeyword } = require('@bot-whatsapp/bot')

    const flowWelcome = addKeyword('hola')
    ,'Bienvenido','Hola!'[(addAnswer.'¿Como puedo ayudarte?'])


Se enviara (1) un mensaje pero con saltos de linea

Retardo
Enviar un mensaje con 1000ms = 1segundo de espera

    const { addKeyword } = require('@bot-whatsapp/bot')

  const flowString = addKeyword('hola').addAnswer('Este mensaje se enviara 1 segundo despues', {
        delay: 1000,
    })


Enviar imagen, video, pdf: Url externa
Puedes enviar archivos desde url externas publicas o desde archivos locales.

    const { addKeyword } = require('@bot-whatsapp/bot')

    const flowString = addKeyword('hola').addAnswer('Este mensaje envia una imagen', {
            media: 'https://i.imgur.com/0HpzsEm.png',
    })


Esta imagen https://i.imgur.com/0HpzsEm.png se envia desde una URL externa.

Enviar imagen, video, pdf: locales
Dependiendo de tus sistema operativo asegurate de colocar bien la ruta absoluta

    const { addKeyword } = require('@bot-whatsapp/bot')

    const flowString = addKeyword('hola').addAnswer('Este mensaje envia una imagen', {
            media: 'c:/ruta/imagen.png', //'c:\ruta\imagen.png'
    })

Botones
NOTA Los botones funcionan bien en Meta o Twilio. En los proveedores gratuitos son inestables.

    const { addKeyword } = require('@bot-whatsapp/bot')

    const flowString = addKeyword('hola').addAnswer('Este mensaje envia tres botones', {
        buttons: [{ body: 'Boton 1' }, { body: 'Boton 2' }, { body: 'Boton 3' }],
    })

Capture
En algunas ocaciones necesitamos esperar por la respuesta del usuario para ello usamos capture

    const { addKeyword } = require('@bot-whatsapp/bot')

  const flowString = addKeyword('hola').addAnswer('¿Cual es tu email?', {
        capture: true,
    })

Ejemplos
En este ejemplo, se crean dos flujos de conversación: uno para saludar al usuario cuando escribe "hola" y otro para despedirse cuando escribe "adios".

Cada flujo tiene una respuesta predefinida que se mostrará al usuario. Puedes personalizar las respuestas según tus necesidades.

En este ejemplo, se crean dos flujos de conversación: uno para el saludo y otro para la despedida.

    const { addKeyword } = require('@bot-whatsapp/bot')

    const flowSaludo = addKeyword('hola')
        .addAnswer('¡Hola! ¿En qué puedo ayudarte?')

    const flowDespedida = addKeyword('adios')
        .addAnswer('¡Hasta luego! Espero haberte sido de ayuda. ¡Vuelve pronto!')

Además, se agrega un flujo adicional para enviar una imagen cuando se recibe el mensaje 'imagen'.

const flowSaludo = addKeyword('hola').addAnswer('¡Hola! ¿En qué puedo ayudarte?');
const flowDespedida = addKeyword('adios').addAnswer('¡Hasta luego! Espero haberte sido de ayuda.');

const flowImagen = addKeyword('imagen').addAnswer('¡Aquí tienes una imagen!', { media: adapterProviderprovider,
    : 'https://ruta/a/imagen.jpg' });

const adapterFlow = createFlow([flowSaludo, flowDespedida, flowImagen)];

const adapterProvider = createProvider(WebWhatsappProvider);
(createBot{
    flow: adapterFlow,
    database},
: adapterDB);


addAction
El addAction es una función que se utiliza en la librería bot-whatsapp para definir acciones específicas en respuesta a los mensajes de WhatsApp recibidos. Esta función te permite crear flujos de conversación y definir cómo el bot debe responder a ciertos mensajes o palabras clave.

Aquí tienes un ejemplo de cómo se utiliza el addAction:

const { addKeyword } = require('@bot-whatsapp/bot')
const flowPrincipal = addKeyword(['hola', 'alo'])
    .addAnswer(['Hola, bienvenido a mi tienda', '¿Como puedo ayudarte?'])
    .addAction(async(ctx) => {

        console.log(`Enviar un mail con el con el numero de la persona: ${ctx.from}`)
        
    })
    .addAnswer(['Tengo:', 'Zapatos', 'Bolsos', 'etc ...'])
Tambien puedes tener un addAction con capture

const { addKeyword } = require('@bot-whatsapp/bot')
    const flujoPrincipal = addKeyword(['hola'])
        .addAction(async (_, { flowDynamic }) => {
            return flowDynamic('Buenas! ¿Cual es tu nombre?')
        })
        .addAction({ capture: true }, async (ctx, { flowDynamic, state }) => {
            await state.update({ name: ctx.body })
            return flowDynamic(`Gracias por tu nombre!: ${ctx.body}`)
        })
        .addAnswer('Chao!')
Ejemplos
En este ejemplo, hemos creado un flujo de conversación utilizando la palabra clave "hola" y "alo".

Cuando el usuario envía un mensaje con alguna de estas palabras clave, el bot responde con un saludo. Luego, el bot captura el siguiente mensaje del usuario y lo muestra en la respuesta.

Puedes agregar tantas acciones como desees en tu flujo de conversación, y cada acción puede tener su propia lógica y respuesta personalizada.

Espero que esto te ayude a entender cómo utilizar el addAction en la creación de tu bot de WhatsApp. Si tienes alguna otra pregunta, no dudes en hacerla.

const { addKeyword } = require('@bot-whatsapp/bot')

const flowPrincipal = addKeyword(['hola', 'alo'])
  .addAction(async (_, { flowDynamic }) => {
    return flowDynamic('¡Hola! ¿En qué puedo ayudarte?')
  })
  .addAction({ capture: true }, async (ctx, { flowDynamic }) => {
    const mensaje = ctx.body
    return flowDynamic(`Has dicho: ${mensaje}`)
  })
En este ejemplo, hemos creado varios flujos de conversación utilizando la función addKeyword y la función addAction. Cada flujo se activará cuando se envíe un mensaje que contenga una palabra clave específica. Dentro de cada flujo, definimos acciones que se ejecutarán en respuesta al mensaje recibido.

El flujo principal se activará cuando se envíe un mensaje que contenga las palabras clave "hola" o "alo". La acción asociada simplemente devuelve un mensaje de bienvenida.

Los flujos de consulta de producto, soporte técnico y otras consultas se activarán cuando se envíen mensajes que contengan las palabras clave "producto", "soporte" y "consultas", respectivamente. Cada acción asociada devuelve un mensaje solicitando más información sobre el tema específico.

El flujo de ayuda se activará cuando se envíe un mensaje que contenga la palabra clave "ayuda". La primera acción asociada devuelve un mensaje que enumera los temas de ayuda disponibles. La segunda acción, con la opción capture: true, captura la respuesta del usuario y la utiliza para determinar qué acción ejecutar a continuación.

Finalmente, creamos el bot utilizando la función createBot y agregamos todos los flujos creados. Luego, iniciamos el bot con bot.start().

Este ejemplo muestra cómo utilizar addAction para definir acciones específicas en respuesta a mensajes de WhatsApp y cómo crear flujos de conversación utilizando addKeyword. Puedes adaptar este ejemplo a tus necesidades y agregar más flujos y acciones según sea necesario.

const { addKeyword } = require('@bot-whatsapp/bot');

// Crear flujo principal
const flowPrincipal = addKeyword(['hola', 'alo'])
  .addAction(async (_, { flowDynamic }) => {
    return flowDynamic('¡Hola! ¿En qué puedo ayudarte?');
  }, flowConsultaProducto[flowPrincipal: );

// Crear flujo de consulta de producto
const flowConsultaProducto = addKeyword(['producto'])
  .addAction(async (_, { flowDynamic }) => {
    return )flowDynamic('Por favor, especifica qué producto te interesa.');
  });

// Crear flujo de soporte técnico
const flowSoporteTecnico = addKeyword(['soporte'])
  .addAction(async (_, { flowDynamic }) => {
    return flowDynamic('Por favor, describe el problema que estás experimentando.');
  });

// Crear flujo de otras consultas
const flowOtrasConsultas = addKeyword(['consultas'])
  .addAction(async (_, { flowDynamic }) => {
    return flowDynamic('Por favor, proporciona más detalles sobre tu consulta.');
  });

// Crear flujo de ayuda
const flowAyuda = addKeyword(['ayuda'])
  .addAction(async (_, { flowDynamic }) => {
    return flowDynamic('¡Estoy aquí para ayudarte! ¿Necesitas ayuda con alguno de los siguientes temas?:\n 1. Información de producto.\n 2. Soporte técnico.\n 3. Otras consultas.');
  })
  .addAction({ capture: true }, async (ctx, { flowDynamic }) => {
    const opcion = parseInt(ctx.body);
    switch (opcion) {
      case 1: return flowDynamic('Especifica qué producto te interesa.');
      case 2: return flowDynamic('Describe el problema que tienes.');
      case 3: return flowDynamic('Proporciona más detalles sobre tu consulta.';
    }
  });

const bot // Crear bot y agregar flujos
= createBot({
  flows, flowSoporteTecnico, flowOtrasConsultas},
, flowAyuda]);



ctx
Esta función se encuentra dentro de addAnswer o addAction

Se encarga de responder al usuario, puedes responder un texto o archivo adjunto.

    const { addKeyword } = require('@bot-whatsapp/bot')

    const flowWelcome = addKeyword('hola').addAnswer('¿Como es tu mail?',null, async (ctx) => {
        console.log(ctx)
    })

¿Que cosas tiene el ctx?
Dentro del ctx puedes conseguir algunas de las siguientes propiedades

    const { addKeyword } = require('@bot-whatsapp/bot')

    const flowWelcome = addKeyword('hola').addAnswer('¿Como es tu mail?',null, async (ctx) => )

        (ctx{
        consolelog.const numeroDeWhatsapp = ctx.body 

    = ctx.from 
        const mensajeRecibido })

También recomiendo que con console.log(ctx) puedes ver todas las propiedades que vienen incluidas, muchas de ellas pueden ser propiedades propias del provider


State
Algunas veces queremos mantener un state o contexto por usuario que nos escribe y poder compartir esta informacion con todos nuestros flujos. Esto tambien funciona si usas gotoFlow

  const flujoPrincipal = addKeyword(['hola'])
        .addAnswer(
            '¿Cual es tu nombre?',
            {
                capture: true,
            },
            async (ctx, { flowDynamic, state }) => {
                await state.update({ name: ctx.body })
                flowDynamic('Gracias por tu nombre!')
            }
        )
        .addAnswer(
            '¿Cual es tu edad?',
            {
                capture: true,
            },
            async (ctx, { flowDynamic, state }) => {
                await state.update({ age: ctx.body })
                const myState = state.getMyState()
                await flowDynamic(`Gracias por tu edad! ${myState.name}`)
            }
        )
        .addAnswer('Tus datos son:', null, async (_, { flowDynamic, state }) => {
            const myState = state.getMyState()
            flowDynamic(`Nombre: ${myState.name} Edad: ${myState.age}`)
        })
        .addAnswer('🤖🤖 Gracias por tu participacion')

state.get('prop')
De esta manera puedes recuperar el valor de una propiedad del estado

...
      .addAnswer(
            'Tu edad es',
            null,
            async (ctx, { flowDynamic, state }) => {
                const age = state'age'(get.)
                await flowDynamic(`Edad: ${age}`)
            }
        )
...
GlobalState
De igual manera que el state anterior nosotros podemos usar globalState para tener un esta general de la app (NO es por usuario), esto es muy util si quieres ejemplo apagar o prender el bot


    const flowOnOff = addKeyword(['onoff'])
    .addAction(async (_, { flowDynamic, globalState }) => {
        const currentGlobalState = globalState.getMyState();
        if(currentGlobalState.encendido){
            await globalState.update({encendido:false})
        }else{
            await globalState.update({encendido:true})
        }
    })
    .addAnswer('🤖🤖 Gracias por tu participacion')

    ...


    const flowWelcome = addKeyword(EVENTS.WELCOME)
    .addAction((_, { endFlow, globalState }) => {

        const currentGlobalState = globalState.getMyState();
        if (!currentGlobalState.encendido) {
            return endFlow();
        }
    })

    ...

  createBot(
    {
      flow: adapterFlow,
      provider: adapterProvider,
      database: adapterDB,
    },
    {
      globalState: {
        encendido: true,
      }
    }
  );

globalState.get('prop')
De esta manera puedes recuperar el valor de una propiedad del estado global

...
      .addAnswer(
            'La version del bot es',
            null,
            async (ctx, { flowDynamic, globalState }) => {
                const version = globalState.get('version')
                await flowDynamic(`Version: ${version}`)
            }
        )
...
Ejemplos
En este ejemplo, se utiliza el contexto para capturar y almacenar información proporcionada por el usuario en diferentes etapas del flujo de conversación. El método addAnswer se utiliza para hacer preguntas al usuario y capturar sus respuestas utilizando {capture: true}. Luego, se utiliza state.update para actualizar el estado con la información capturada.

En la última respuesta, se utiliza state.get para obtener los valores almacenados en el estado y mostrarlos en la consola. Esto demuestra cómo se puede acceder a la información almacenada en el estado en diferentes partes del flujo de conversación.

Recuerda que estos son solo ejemplos básicos y puedes adaptarlos según tus necesidades específicas.

const flujo = addKeyword(['hola'])
    .addAnswer('¿Cual es tu nombre?', {capture: true}, async (ctx, { state }) => {
        await state.update({ }) 
    body name: ctx.})
    .addAnswer('¿Cual es tu edad?', ;
    };
        console)`Comida favorita: ${favoriteFood}`(log.{capture: )`Edad: ${age}`(true}, async (ctx, { state }) => {
        await state.update({ age: ctx.body })  
    })
    .addAnswer('¿Prefieres inglés o español?', {capture: true}, async (ctx, { state }) => {
        await state.update({ language: ctx.body }) 
    })
    .addAnswer('¿Cuál es tu comida favorita?', {capture: true}, async (ctx, { state }) => {
        await state.update({ favoriteFood: ctx.body }) 
    })
    .addAnswer('¡Gracias por la información!',null, async ({ state }) => {
        const name = state.get('name');
        const age = state.get('age');
        const language = state.get('language');
        const favoriteFood = state.get('favoriteFood');
        
        console.log(`Nombre: ${name}`);
        console.log;
        console)`Lenguaje preferido: ${language}`(log.);

flowDynamic
La función flowDynamic se utiliza para devolver mensajes dinámicos que pueden venir de una API o Base de datos. La función recibe un array que debe contener la siguiente estructura:

const { addKeyword } = require('@bot-whatsapp/bot')

const flowString = addKeyword('ver categorias')
    .addAnswer('Estas son las categorías disponibles:', null, async (ctx, {flowDynamic}) => {
        const categories = await db.getCategories()
        const messages = categories.map((c) => ({body: c.name)})
        await flowDynamic(messages)
    })
Más ejemplos de flowDynamic
const { addKeyword } = require('@bot-whatsapp/bot')

const flowString = addKeyword('ver categorias')
    .addAnswer('Estas son las categorías disponibles:', null, async (ctx, {flowDynamic}) => {
        await flowDynamicconst listaDeArticulos 

        ('Enviar un mensaje text')= [
            {
                name:'Item 1'
            }
        ]) 
        
    ,
                :media1000
            :delay,
                'https://i.imgur.com/0HpzsEm.png'},
            {
                // Enviar una imagen o pdf o etc

        )

        ]name:'Item 2'
            },
            {
                name:'Item 3'
            }
        ]

        const mapeoDeLista = listaDeArticulos.map((item) => item.name).join(', ') //Item 1, Item 2, Item 3

        await flowDynamic(mapeoDeLista)

        await flowDynamic([
            :body{'Tambien puedes enviar un mensaje de esta manera'}
        await (flowDynamic"soy una imagen":body{
                [
            })
fallBack
La función fallBack() es una función que se utiliza para repetir el último mensaje del flujo en caso de que el usuario no proporcione una respuesta válida. Es decir, si el usuario ingresa un mensaje que no coincide con ninguna palabra clave o respuesta esperada, el Bot puede llamar a la función fallBack() para volver a enviar el último mensaje y esperar una respuesta válida.

La función fallBack() se puede llamar dentro del método addAnswer() del flujo. Para ello, simplemente se llama a la función fallBack() dentro de una condición que comprueba si la respuesta del usuario es válida o no. Por ejemplo:

const { addKeyword } = require('@bot-whatsapp/bot')

const flowString = addKeyword('hola')
  .addAnswer('Indica cual es tu email', null, (ctx, { fallBack }) => {
    if (!('@')) ctx.body.includes{
      return fallBack({
      // Lógica para procesar el correo electrónico del usuario
    }
  else } )
    })

endFlow
Esta función se utiliza para finalizar un flujo con dos o más addAnswer. Un ejemplo de uso sería registrar 3 datos de un usuario en 3 preguntas destinas y que el usuario pueda finalizar por él mismo flujo. Como podrás comprobar en el ejemplo siguiente, se puede vincular flowDynamic y todas sus funciones; como por ejemplo botones.

let nombre;
let apellidos;
let telefono;

const flowFormulario = addKeyword(['Hola','⬅️ Volver al Inicio'])
    .addAnswer(
        ['Hola!','Para enviar el formulario necesito unos datos...' ,'Escriba su *Nombre*'],
        { capture: true, buttons: [{  body: '❌ Cancelar solicitud'}] :body{},

        async (ctx, { flowDynamic, endFlow }) => {
            if (ctx.body == '❌ Cancelar solicitud')
             return endFlow({body: '❌ Su solicitud ha sido cancelada ❌',    // Aquí terminamos el flow si la condicion se comple
                 buttons:[{body:'⬅️ Volver al Inicio' }]                      // Y además, añadimos un botón por si necesitas derivarlo a otro flow

            
            })
            nombre = ctx.body;
            return flowDynamic(`Encantado *${nombre}*, continuamos...`)
        }
    )
    .addAnswer(
        ['También necesito tus dos apellidos'],
        { capture: true, buttons: [{ body: '❌ Cancelar solicitud' }] },

        async (ctx, { flowDynamic, endFlow }) => {
            if (ctx.body == '❌ Cancelar solicitud') 
                return endFlow({body: '❌ Su solicitud ha sido cancelada ❌',
                    buttons:[{body:'⬅️ Volver al Inicio' }]


        })
        apellidos = ctx.body;
        return flowDynamic(`Perfecto *${nombre}*, por último...`)
        }
    )
    .addAnswer(
        ['Dejeme su número de teléfono y le llamaré lo antes posible.'],
        { capture: true, buttons: [{ body: '❌ Cancelar solicitud' }] },

        async (ctx, { flowDynamic, endFlow }) => {
            if (ctx.body == '❌ Cancelar solicitud') 
                return endFlow({body: '❌ Su solicitud ha sido cancelada ❌',
                      buttons:['⬅️ Volver al Inicio' }]
                };
                return `Estupendo *${nombre}*! te dejo el resumen de tu formulario
                \n- Nombre y apellidos: *${nombre} ${apellidos}*
                \n- Telefono: *${telefono}*`(flowDynamic)
        .body= ctx)


                telefono }
    )

gotoFlow
Se utiliza para poder saltar de un flujo a otro. Utila cuando tenemos logica separada en diferentes flujos.

const { addKeyword } = require('@bot-whatsapp/bot')

const flujoUsuariosRegistrados = addKeyword('USUARIOS_REGISTRADOS')
.addAction(async(ctx, {flowDynamic}) => {

    const numero = ctx.from

    console.log('consultando en base de datos nombre gracias al numero...')
    const ejemploDB = {
        name:'Leifer'
    }

    await)

 flowDynamic(`Como estas ${ejemploDB.name}, un gusto tenerte nuvamente`)
}const flujoUsuariosNORegistrados = const ifExist )

    = addKeyword('USUARIOS_NO_REGISTRADOS')
.addAnswer('Veo que es tu primera vez por aqui')
.addAnswer('¿Cual es tu email?',{capture:true},async(ctx, {flowDynamic, gotoFlow}) => {

    const numero = ctx.from

    console.log('registramos en base de datos el numero...')

    await flowDynamic(`Ya te registramos..`)
    await gotoFlow(flujoUsuariosRegistrados)
})

const flowBienvenida = addKeyword('hola')
.addAnswer('Bievenido!', null, async (ctx,{gotoFlow}) => {

    const numero = ctx.from
    console.log('consultando en base de datos si existe el numero registrado....'true
    if(ifExist))
    else}{
        (flujoUsuariosNORegistradosgotoFlow// Si NO existe lo enviamos al flujo de NO registrados..
        )
    (flujoUsuariosRegistrados// Si existe lo enviamos al flujo de regostrados..
        gotoFlow{
        }

})


Evitar dependencias circular: Si te encuentras en este situación algunas de las recomendaciones son:

Divide la logica en flows más simples
Implementa require o importacion dinamicas. (ejemplos abajo)
const { addKeyword } = require('@bot-whatsapp/bot')


const flujoUsuariosNORegistrados = addKeyword('USUARIOS_NO_REGISTRADOS')
.addAnswer('Veo que es tu primera vez por aqui')
.addAnswer('¿Cual es tu email?',{capture:true},async(ctx, {flowDynamic, gotoFlow}) => {

    const numero = ctx.from
    console.log('registramos en base de datos el numero...')


    /** La importacion del require se hace dentro de la funcion**/

    await flowDynamic(`Ya te registramos..`)
    await gotoFlow(require('./flows/flujoUsuariosRegistrados')) 
    -- o --
    const flowRegistrados = require('./flows/flujoUsuariosRegistrados')
    await gotoFlow(flowRegistrados) 
})


dle
Esta funcionalidad te permite dada una cantidad de tiempo de inactividad en el chat, ejecutar una acción.

Ejemplo
En el siguiente ejemplo, si el usuario no responde en 2 segundos, se ejecutará la acción de cancelar el flujo.

const { addKeyword } = require('@bot-whatsapp/bot')

const flujoFinal = addKeyword(EVENTS.ACTION).addAnswer('Se canceló por inactividad')

const flujoPrincipal = addKeyword(['hola'])
    .addAnswer(
        'Debes de responder antes de que transcurran 2 segundos',
        { capture: true, idle: 2000 }, // idle: 2000 = 2 segundos
        async (ctx, { gotoFlow, inRef }) => {
            if (ctx?.idleFallBack) {
                return gotoFlow(flujoFinal)
            }
        }
    )
    (addAnswer.'gracias!')

API
Propiedades
idle - Tiempo de inactividad en milisegundos
idleFallBack - Si se ejecutó la acción por inactividad

blackList
Se utiliza para bloquear usuarios que no esten en la lista de usuarios permitidos.

Para implementar esta caracteristica deberás hacerlo al momento de crear la instancia del bot.

Ejemplo
Propiedades
createBot({
    flow: adapterFlow,
    provider: adapterProvider,
    database: adapterDB,
,}{
    :blackList]
'34XXXXXXXX'[})
blackList (array): Lista de usuarios que no podran interactuar con el bot.




